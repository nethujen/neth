import numpy as np

def print_matrix(matrix):
    for row in matrix:
        print(row)

def reduce_to_rref(matrix):
    # Convert the entire matrix to floating-point type
    matrix = matrix.astype(float)

    rows, cols = matrix.shape
    current_row, current_col = 0, 0

    while current_row < rows and current_col < cols:
        # Find the pivot for this column
        pivot_row = current_row
        while pivot_row < rows and matrix[pivot_row, current_col] == 0:
            pivot_row += 1

        if pivot_row == rows:
            # No pivot in this column, move to the next column
            current_col += 1
        else:
            # Swap rows to move the pivot to the current row
            matrix[[current_row, pivot_row]] = matrix[[pivot_row, current_row]]
            
            # Scale the pivot row to have a leading 1
            matrix[current_row] /= matrix[current_row, current_col]

            # Eliminate other entries in the current column
            for i in range(rows):
                if i != current_row:
                    factor = matrix[i, current_col]
                    matrix[i] -= factor * matrix[current_row]

            print(f"\nStep {current_row + 1}:\n")
            print_matrix(matrix)

            current_row += 1
            current_col += 1

# Example usage
matrix = np.array([[-2, -5, 4, 1],
                   [2, -3, 2, 9],
                   [3,0, 4, -14]])

print("Original Matrix:")
print_matrix(matrix)

reduce_to_rref(matrix)

print("\nReduced Row-Echelon Form (RREF):")
print_matrix(matrix)
